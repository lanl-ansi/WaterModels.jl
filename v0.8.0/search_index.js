var documenterSearchIndex = {"docs":
[{"location":"math-model.html#Mathematical-Models-in-WaterModels","page":"Mathematical Models","title":"Mathematical Models in WaterModels","text":"","category":"section"},{"location":"math-model.html#Notation-for-Sets","page":"Mathematical Models","title":"Notation for Sets","text":"","category":"section"},{"location":"math-model.html","page":"Mathematical Models","title":"Mathematical Models","text":"A water distribution network is represented by a directed graph mathcalG = (mathcalN mathcalL), where mathcalN is the set of nodes and mathcalL is the set of arcs (conventionally \"links,\" e.g., pipes and valves). Temporal evolution of the network is represented by a set mathcalK, denoting the set of all time steps considered. In summary, the following sets are commonly used when defining a WaterModels problem formulation:","category":"page"},{"location":"math-model.html","page":"Mathematical Models","title":"Mathematical Models","text":"Notation WaterModels Translation Description\nmathcalN wm.ref[:nw][n][:node] nodes (to which nodal-type components are attached)\nmathcalK nw_ids(wm) time indices (multinetwork indices labeled by n)\nmathcalD wm.ref[:nw][n][:demand] demands\nmathcalR wm.ref[:nw][n][:reservoir] reservoirs\nmathcalT wm.ref[:nw][n][:tank] tanks\nmathcalA subset mathcalL wm.ref[:nw][n][:pipe] pipes\nmathcalP subset mathcalL wm.ref[:nw][n][:pump] pumps\nmathcalW subset mathcalL wm.ref[:nw][n][:regulator] regulators\nmathcalS subset mathcalL wm.ref[:nw][n][:short_pipe] short pipes\nmathcalV subset mathcalL wm.ref[:nw][n][:valve] valves","category":"page"},{"location":"math-model.html#Physical-Feasibility","page":"Mathematical Models","title":"Physical Feasibility","text":"","category":"section"},{"location":"math-model.html#Nodes","page":"Mathematical Models","title":"Nodes","text":"","category":"section"},{"location":"math-model.html#Demands","page":"Mathematical Models","title":"Demands","text":"","category":"section"},{"location":"math-model.html#Reservoirs","page":"Mathematical Models","title":"Reservoirs","text":"","category":"section"},{"location":"math-model.html#Tanks","page":"Mathematical Models","title":"Tanks","text":"","category":"section"},{"location":"math-model.html#Links","page":"Mathematical Models","title":"Links","text":"","category":"section"},{"location":"math-model.html#Pipes","page":"Mathematical Models","title":"Pipes","text":"","category":"section"},{"location":"math-model.html#Design-Pipes","page":"Mathematical Models","title":"Design Pipes","text":"","category":"section"},{"location":"math-model.html#Pumps","page":"Mathematical Models","title":"Pumps","text":"","category":"section"},{"location":"math-model.html#Regulators","page":"Mathematical Models","title":"Regulators","text":"","category":"section"},{"location":"math-model.html#Short-Pipes","page":"Mathematical Models","title":"Short Pipes","text":"","category":"section"},{"location":"math-model.html#Valves","page":"Mathematical Models","title":"Valves","text":"","category":"section"},{"location":"math-model.html#Satisfaction-of-Flow-Bounds","page":"Mathematical Models","title":"Satisfaction of Flow Bounds","text":"","category":"section"},{"location":"math-model.html#Satisfaction-of-Head-Bounds","page":"Mathematical Models","title":"Satisfaction of Head Bounds","text":"","category":"section"},{"location":"math-model.html#Conservation-of-Flow","page":"Mathematical Models","title":"Conservation of Flow","text":"","category":"section"},{"location":"math-model.html#Head-Loss-Relationships","page":"Mathematical Models","title":"Head Loss Relationships","text":"","category":"section"},{"location":"math-model.html#Nonconvex-Nonlinear-Program","page":"Mathematical Models","title":"Nonconvex Nonlinear Program","text":"","category":"section"},{"location":"math-model.html#Mixed-integer-Convex-Program","page":"Mathematical Models","title":"Mixed-integer Convex Program","text":"","category":"section"},{"location":"math-model.html#Mixed-integer-Linear-Program","page":"Mathematical Models","title":"Mixed-integer Linear Program","text":"","category":"section"},{"location":"relaxations.html#Relaxation-Schemes","page":"Relaxation Schemes","title":"Relaxation Schemes","text":"","category":"section"},{"location":"benchmarks.html#WaterModels-Benchmarks","page":"Benchmarks","title":"WaterModels Benchmarks","text":"","category":"section"},{"location":"network-data.html#WaterModels-Network-Data-Format","page":"Network Data Format","title":"WaterModels Network Data Format","text":"","category":"section"},{"location":"developer.html#Developer-Documentation","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"parser.html#File-I/O","page":"File I/O","title":"File I/O","text":"","category":"section"},{"location":"parser.html","page":"File I/O","title":"File I/O","text":"CurrentModule = WaterModels","category":"page"},{"location":"parser.html#General-Data-Formats","page":"File I/O","title":"General Data Formats","text":"","category":"section"},{"location":"parser.html","page":"File I/O","title":"File I/O","text":"parse_file\nparse_json","category":"page"},{"location":"parser.html#WaterModels.parse_file","page":"File I/O","title":"WaterModels.parse_file","text":"parse_file(path)\n\nParses an EPANET (.inp) or JavaScript Object Notation (JSON) file from the file path path, depending on the file extension, and returns a WaterModels data structure (a dictionary of data).\n\n\n\n\n\n","category":"function"},{"location":"parser.html#WaterModels.parse_json","page":"File I/O","title":"WaterModels.parse_json","text":"parse_json(path)\n\nParses a JavaScript Object Notation (JSON) file from the file path path and returns a WaterModels data structure (a dictionary of data).\n\n\n\n\n\n","category":"function"},{"location":"parser.html#EPANET-Data-Files","page":"File I/O","title":"EPANET Data Files","text":"","category":"section"},{"location":"parser.html","page":"File I/O","title":"File I/O","text":"The following method is the main exported method for parsing EPANET data files:","category":"page"},{"location":"parser.html","page":"File I/O","title":"File I/O","text":"parse_epanet","category":"page"},{"location":"parser.html#WaterModels.parse_epanet","page":"File I/O","title":"WaterModels.parse_epanet","text":"parse_epanet(path)\n\nParses an EPANET (.inp) file from the file path path and returns a WaterModels data structure (a dictionary of data). See the OpenWaterAnalytics Wiki for a thorough description of the EPANET format and its components.\n\n\n\n\n\n","category":"function"},{"location":"quickguide.html#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The following guide walks through the solution of a water network design (des) problem using two mixed-integer linear programming (MILP) formulations (PWLRD and LRD) of the problem specification. This is to enable solution using the readily-available open-source MILP solver Cbc. Other formulations rely on the availability of mixed-integer nonlinear programming (MINLP) solvers that support user-defined nonlinear functions in JuMP. However, these solvers (e.g., Juniper, KNITRO) either require additional effort to register user-defined functions or are proprietary and require a commercial license.","category":"page"},{"location":"quickguide.html#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The latest stable release of WaterModels can be installed using the Julia package manager with","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"] add WaterModels","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"For the current development version, install the package using","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"] add WaterModels#master","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"Finally, test that the package works as expected by executing","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"] test WaterModels","category":"page"},{"location":"quickguide.html#Solving-a-Network-Design-Problem","page":"Getting Started","title":"Solving a Network Design Problem","text":"","category":"section"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"Once the above dependencies have been installed, obtain the file shamir.json. Here, shamir.json is a JSON file specifying the network, as well as possible pipe diameters and associated costs, per diameter setting. The file provides the required information to set up a corresponding network design problem, where the goal is to select the most cost-efficient pipe diameters while satisfying all demand in the network.","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"To read in the data, execute the following:","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"using WaterModels\ndata = parse_file(\"examples/data/json/shamir.json\")","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"Since we are using a linearization-based formulation of the problem, it is important to specify the partitioning of flows that parameterize the formulation. Here, we initialize linearization flow partitions that assume a head loss error tolerance of fifty meters, with widths between flow points no greater than 1.0e-4 cubic meters per second:","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"set_flow_partitions_si!(data, 50.0, 1.0e-4)","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"Finally, the PWLRD formulation for the network design specification can be solved using","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"import Cbc\nsolve_des(data, PWLRDWaterModel, Cbc.Optimizer)","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The above flow partitioning, however, is somewhat coarse, and the number of points in each partition is typically three, e.g.,","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"data[\"des_pipe\"][\"3\"][\"flow_partition\"]","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The relaxation can be more finely discretized by using a smaller head loss error tolerance, e.g.,","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"set_flow_partitions_si!(data, 5.0, 1.0e-4)","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"We can then solve the problem with the updated partitioning scheme via","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"import JuMP\ncbc = JuMP.optimizer_with_attributes(Cbc.Optimizer, \"seconds\" => 30.0)\nsolve_des(data, PWLRDWaterModel, cbc)","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"Note that this formulation takes much longer to solve to global optimality due to the use of more binary variables. However, because of the finer discretization, a better approximation of the physics is attained.","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"Instead of using piecewise-linear envelopes, head loss curves can also be simply outer-approximated via the LRD formulation. This formulation employs less strict requirements and avoids the use of binary variables for piecewise approximation, but solutions (e.g., diameters) may not be as close to feasibility with respect to the full (nonconvex) water network physics. To solve an LRD formulation of the problem using an even finer flow partitioning scheme (but without piecewise inner head loss approximations), the following can be executed:","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"set_flow_partitions_si!(data, 0.5, 1.0e-4)\nsolve_des(data, LRDWaterModel, Cbc.Optimizer)","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"This relaxation of the problem turns out to converge to the known globally optimal objective value.","category":"page"},{"location":"quickguide.html#Obtaining-Results","page":"Getting Started","title":"Obtaining Results","text":"","category":"section"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"For the rest of this tutorial, we will first assume a coarser relaxation by resetting the flow partitions as","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"set_flow_partitions_si!(data, 50.0, 1.0e-4)","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The run commands in WaterModels return detailed results data in the form of a Julia Dict. This dictionary can be saved for further processing as follows:","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"result = solve_des(data, LRDWaterModel, Cbc.Optimizer)","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"For example, the algorithm's runtime and final objective value can be accessed with","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"result[\"solve_time\"]\nresult[\"objective\"]","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The \"solution\" field contains detailed information about the solution produced by the run method. For example, the following dictionary comprehension can be used to inspect the flows in the solution:","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"flows = Dict(name => data[\"q\"] for (name, data) in result[\"solution\"][\"des_pipe\"])","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"To determine the design pipes that were selected via the optimization, the following can be used:","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"pipes_selected = filter(x -> x.second[\"status\"] == 1, result[\"solution\"][\"des_pipe\"])","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"To retrieve the subset of the original pipe dataset, the following can be used:","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"pipes_subset = filter(x -> x.first in keys(pipes_selected), data[\"des_pipe\"])","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"For more information about WaterModels result data see the WaterModels Result Data Format section.","category":"page"},{"location":"quickguide.html#Accessing-Different-Formulations","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The MILP formulations discussed above assume access to a MILP solver. Mixed-integer nonconvex nonlinear programming (MINCP) formulations can be solved with dedicated solvers, as well. For example, the MINCP formulation for design (NC) can be solved via","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"import KNITRO\nsolve_des(data, NCWaterModel, KNITRO.Optimizer)","category":"page"},{"location":"quickguide.html#Modifying-Network-Data","page":"Getting Started","title":"Modifying Network Data","text":"","category":"section"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates one way to perform multiple WaterModels solves while modifying network data:","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"solve_des(data, LRDWaterModel, Cbc.Optimizer)\n\ndata[\"demand\"][\"3\"][\"flow_min\"] *= 0.5\ndata[\"demand\"][\"3\"][\"flow_max\"] *= 0.5\ndata[\"demand\"][\"3\"][\"flow_nominal\"] *= 0.5\n\nsolve_des(data, LRDWaterModel, Cbc.Optimizer)","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"Note that the smaller demands in the second problem result in an overall smaller design cost. For additional details about the network data, see the WaterModels Network Data Format section.","category":"page"},{"location":"quickguide.html#Alternative-Methods-for-Building-and-Solving-Models","page":"Getting Started","title":"Alternative Methods for Building and Solving Models","text":"","category":"section"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to break a solve_des call into separate model building and solving steps. This allows inspection of the JuMP model created by WaterModels for the problem.","category":"page"},{"location":"quickguide.html","page":"Getting Started","title":"Getting Started","text":"wm = instantiate_model(data, LRDWaterModel, WaterModels.build_des);\n\nprintln(wm.model)\n\nresult = optimize_model!(wm, optimizer = Cbc.Optimizer)","category":"page"},{"location":"constraints.html#Constraints","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"constraints.html","page":"Constraints","title":"Constraints","text":"CurrentModule = WaterModels","category":"page"},{"location":"constraints.html#Constraint-Templates","page":"Constraints","title":"Constraint Templates","text":"","category":"section"},{"location":"constraints.html","page":"Constraints","title":"Constraints","text":"Constraint templates help simplify data wrangling across multiple optimization formulations by providing an abstraction layer between the network data and network constraint definitions. Each constraint template's job is to extract the required parameters from a given network data structure and pass the data as named arguments to the optimization formulation.","category":"page"},{"location":"constraints.html","page":"Constraints","title":"Constraints","text":"These templates should be defined over AbstractWaterModel and should not refer to model variables. For more details, see the files core/constraint_template.jl and core/constraint.jl. Here, core/constraint_template.jl provides higher-level constraint interfaces by processing network data and calling methods defined in core/constraint.jl.","category":"page"},{"location":"constraints.html#Nodal-Constraints","page":"Constraints","title":"Nodal Constraints","text":"","category":"section"},{"location":"constraints.html","page":"Constraints","title":"Constraints","text":"constraint_flow_conservation","category":"page"},{"location":"constraints.html#WaterModels.constraint_flow_conservation","page":"Constraints","title":"WaterModels.constraint_flow_conservation","text":"constraint_flow_conservation(\n    wm, n, i, pipe_fr, pipe_to, des_pipe_fr, des_pipe_to, pump_fr, pump_to,\n    regulator_fr, regulator_to, short_pipe_fr, short_pipe_to, valve_fr, valve_to,\n    reservoirs, tanks, dispatachable_demands, fixed_demand)\n\nAdds a constraint that ensures flow conservation at a node in the network.\n\n\n\n\n\n","category":"function"},{"location":"model.html#Water-Model","page":"WaterModel","title":"Water Model","text":"","category":"section"},{"location":"specifications.html#Problem-Specifications","page":"Problem Specifications","title":"Problem Specifications","text":"","category":"section"},{"location":"specifications.html#Water-Flow-(WF)","page":"Problem Specifications","title":"Water Flow (WF)","text":"","category":"section"},{"location":"specifications.html#Functions","page":"Problem Specifications","title":"Functions","text":"","category":"section"},{"location":"specifications.html#Objective","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications.html#Variables","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications.html#Constraints","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications.html#Multinetwork-Water-Flow-(MN-WF)","page":"Problem Specifications","title":"Multinetwork Water Flow (MN WF)","text":"","category":"section"},{"location":"specifications.html#Functions-2","page":"Problem Specifications","title":"Functions","text":"","category":"section"},{"location":"specifications.html#Objective-2","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications.html#Variables-2","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications.html#Constraints-2","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications.html#Multinetwork-Water-Flow-with-Switching-Constraints-(MN-WF-SWITCHING)","page":"Problem Specifications","title":"Multinetwork Water Flow with Switching Constraints (MN WF SWITCHING)","text":"","category":"section"},{"location":"specifications.html#Functions-3","page":"Problem Specifications","title":"Functions","text":"","category":"section"},{"location":"specifications.html#Objective-3","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications.html#Variables-3","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications.html#Constraints-3","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications.html#Optimal-Water-Flow-(OWF)","page":"Problem Specifications","title":"Optimal Water Flow (OWF)","text":"","category":"section"},{"location":"specifications.html#Functions-4","page":"Problem Specifications","title":"Functions","text":"","category":"section"},{"location":"specifications.html#Objective-4","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications.html#Variables-4","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications.html#Constraints-4","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications.html#Multinetwork-Optimal-Water-Flow-(MN-OWF)","page":"Problem Specifications","title":"Multinetwork Optimal Water Flow (MN OWF)","text":"","category":"section"},{"location":"specifications.html#Functions-5","page":"Problem Specifications","title":"Functions","text":"","category":"section"},{"location":"specifications.html#Objective-5","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications.html#Variables-5","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications.html#Constraints-5","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"specifications.html#Optimal-Design-(DES)","page":"Problem Specifications","title":"Optimal Design (DES)","text":"","category":"section"},{"location":"specifications.html#Functions-6","page":"Problem Specifications","title":"Functions","text":"","category":"section"},{"location":"specifications.html#Objective-6","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"specifications.html#Variables-6","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"specifications.html#Constraints-6","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"result-data.html#WaterModels-Result-Data-Format","page":"Result Data Format","title":"WaterModels Result Data Format","text":"","category":"section"},{"location":"formulations.html#Network-Formulations","page":"Network Formulations","title":"Network Formulations","text":"","category":"section"},{"location":"variables.html#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"variables.html","page":"Variables","title":"Variables","text":"The following methods provide a compositional approach for defining common variables used in water network optimization models. These methods are always defined over AbstractWaterModel.","category":"page"},{"location":"variables.html","page":"Variables","title":"Variables","text":"Modules = [WaterModels]\nPages   = [\"core/variable.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"variables.html#WaterModels.comp_start_value","page":"Variables","title":"WaterModels.comp_start_value","text":"Sets the start value for a given variable.\n\n\n\n\n\n","category":"function"},{"location":"variables.html#WaterModels.comp_start_value-2","page":"Variables","title":"WaterModels.comp_start_value","text":"Sets the start value for a given variable.\n\n\n\n\n\n","category":"function"},{"location":"variables.html#WaterModels.variable_demand_flow-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_demand_flow","text":"Instantiates demand flow variables for all dispatchable demands in the network, i.e., demand[i] for i in dispatchable_demand.\n\n\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_des_pipe_indicator-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_des_pipe_indicator","text":"Creates binary variables for all design pipes in the network, i.e., z_des_pipe[a] for a in des_pipe, where one denotes that the pipe is selected within the design, and zero denotes that the pipe is not selected.\n\n\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_head-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_head","text":"Creates bounded (by default) or unbounded total hydraulic head (or head) variables for all nodes in the network, i.e., h[i] for i in node.\n\n\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_pump_indicator-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_pump_indicator","text":"Creates binary variables for all pumps in the network, i.e., z_pump[a] for a in pump, where one denotes that the pump is currently operating (i.e., on), and zero indicates that the pump is not operating (i.e., off).\n\n\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_pump_switch_off-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_pump_switch_off","text":"\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_pump_switch_on-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_pump_switch_on","text":"\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_regulator_indicator-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_regulator_indicator","text":"Creates binary variables for all regulators in the network, i.e., z_regulator[a] for a in regulator, where one denotes that the pressure reducing is currently open and zero otherwise.\n\n\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_reservoir_flow-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_reservoir_flow","text":"Instantiates outgoing flow variables for all reservoirs in the network, i.e., q_reservoir[i] for i in reservoir. Note that these variables are always nonnegative, since for each reservoir, there will never be incoming flow.\n\n\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_tank_flow-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_tank_flow","text":"Creates outgoing flow variables for all tanks in the network, i.e., q_tank[i] for i in tank. Note that, unlike reservoirs, tanks can have inflow.\n\n\n\n\n\n","category":"method"},{"location":"variables.html#WaterModels.variable_valve_indicator-Tuple{AbstractWaterModel}","page":"Variables","title":"WaterModels.variable_valve_indicator","text":"Creates binary variables for valves in the network, i.e., z_valve[a] for a in valve, where one denotes that the valve is open and zero denotes that the valve is closed.\n\n\n\n\n\n","category":"method"},{"location":"variables.html#Link-Variables","page":"Variables","title":"Link Variables","text":"","category":"section"},{"location":"variables.html","page":"Variables","title":"Variables","text":"variable_flow","category":"page"},{"location":"variables.html#WaterModels.variable_flow","page":"Variables","title":"WaterModels.variable_flow","text":"Create flow-related variables common to all directed flow models for edge-type components.\n\n\n\n\n\nCreate flow-related variables common to all directed flow models for node-connecting components.\n\n\n\n\n\nCreates flow variables for LA formulations (q, lambda, x_pw).\n\n\n\n\n\nCreate flow-related variables common to all directed flow models for node-connecting components.\n\n\n\n\n\n","category":"function"},{"location":"objective.html#Objective","page":"Objective","title":"Objective","text":"","category":"section"},{"location":"objective.html","page":"Objective","title":"Objective","text":"Modules = [WaterModels]\nPages   = [\"core/objective.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"objective.html#WaterModels.objective_des-Tuple{AbstractWaterModel}","page":"Objective","title":"WaterModels.objective_des","text":"objective_des(wm::AbstractWaterModel)\n\nSets the objective function for network design (des) problem specifications. By default, the cost of selecting the discrete pipe resistances over all design pipes is minimized.\n\n\n\n\n\n","category":"method"},{"location":"objective.html#WaterModels.objective_owf-Tuple{AbstractWaterModel}","page":"Objective","title":"WaterModels.objective_owf","text":"objective_owf(wm::AbstractWaterModel)\n\nSets the objective function for optimal water flow (owf) problem specifications.\n\n\n\n\n\n","category":"method"},{"location":"objective.html#WaterModels.objective_wf-Tuple{AbstractWaterModel}","page":"Objective","title":"WaterModels.objective_wf","text":"objective_wf(wm::AbstractWaterModel)\n\nSets the objective function for Water Flow (WF) problem specifications. By default, only feasibility must be satisfied.\n\n\n\n\n\n","category":"method"},{"location":"objective.html#Objective-Functions","page":"Objective","title":"Objective Functions","text":"","category":"section"},{"location":"objective.html","page":"Objective","title":"Objective","text":"objective_owf","category":"page"},{"location":"objective.html#WaterModels.objective_owf","page":"Objective","title":"WaterModels.objective_owf","text":"objective_owf(wm::AbstractWaterModel)\n\nSets the objective function for optimal water flow (owf) problem specifications.\n\n\n\n\n\n","category":"function"},{"location":"index.html#WaterModels.jl-Documentation","page":"Home","title":"WaterModels.jl Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = WaterModels","category":"page"},{"location":"index.html#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"WaterModels.jl is a Julia/JuMP package for steady-state potable water distribution network optimization. It is designed to enable the computational evaluation of historical and emerging water network optimization formulations and algorithms using a common platform. The code is specifically engineered to decouple Problem Specifications (e.g., water flow, optimal water flow, network design) from Network Formulations (e.g., mixed-integer linear, mixed-integer nonlinear). This decoupling enables the definition of a wide variety of water network optimization formulations and their comparison across several common problem specifications.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The latest stable release of WaterModels can be installed using the Julia package manager with","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"] add WaterModels","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"For the current development version, install the package using","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"] add WaterModels#master","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Finally, test that the package works as expected by executing","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"] test WaterModels","category":"page"},{"location":"index.html#Usage-at-a-Glance","page":"Home","title":"Usage at a Glance","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"At least one optimization solver is required to run WaterModels. The solver selected typically depends on the type of problem formulation being employed. As an example, to solve a mixed-integer linear programming (MILP) formulation of the feasible water flow (wf) problem, the open-source MILP solver CBC can be used. Installation of the JuMP interface to CBC can be performed via the Julia package manager, i.e.,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"] add Cbc","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Then, as one example, a piecewise-linear, relaxation-based convexification of the physics for the well-known Shamir (two-loop) network, using an error tolerance of one meter to model the envelope of each pipe's Hazen-Williams head loss curve, can be solved to feasibility using","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using WaterModels, Cbc\n\n# Parse the network data from an EPANET file.\nnetwork = parse_file(\"examples/data/epanet/shamir.inp\")\n\n# Set linearization partitioning points that assume a head loss error tolerance of one\n# meter, with widths between flow points no greater than 1.0e-4 cubic meters per second.\nset_flow_partitions_si!(network, 1.0, 1.0e-4)\n\n# Solve the corresponding relaxation of the water flow problem.\nresult = solve_wf(network, PWLRDWaterModel, Cbc.Optimizer)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"After solving the problem, results can then be analyzed, e.g.,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"# The termination status of the optimization solver.\nresult[\"termination_status\"]\n\n# The flow along pipe 4 in cubic meters per second.\nresult[\"solution\"][\"pipe\"][\"4\"][\"q\"] * result[\"solution\"][\"base_flow\"]\n\n# The total hydraulic head at node 2 in meters.\nresult[\"solution\"][\"node\"][\"2\"][\"h\"] * result[\"solution\"][\"base_head\"]\n\n# The pressure head at node 2 in meters.\nresult[\"solution\"][\"node\"][\"2\"][\"p\"] * result[\"solution\"][\"base_head\"]","category":"page"}]
}
